@Tutorial(time: 10) {
    @Intro(title: "Nested ObservableObject") {
        `ObservableObject`をプロパティに持つ`ObsevableObject`は`Combine`の監視の仕組み上問題があります。
        `Observation`では、この問題が解決されています。
        
        このTutorialでは`ObservableObject`で起こる問題が、`Observation`では起こらないことを確認していきます。
    }
    
    @Section(title: "ObservableObject") {
        @ContentAndMedia {
            問題が発生する`ObservableObject`を作成し、どのような問題があるか確認します。
        }
        
        @Steps {
            @Step {
                問題が発生する`ObservableObject`を作成します。
                
                @Code(name: "NestedObservableObject.swift", file: NestedObservableObject-01.swift)                
            }
            
            @Step {
                問題を確認します。
                Viewを作ってみます。
                
                @Code(name: "NestedObservableObject.swift", file: NestedObservableObject-02.swift)
                
            }
            
            @Step {
                これで準備ができました。
                @Image(source: "NestedObservableObject-image-01.png")
            }
            
            @Step {
                Have Birthdayボタンをタップしてみましょう。
                
                @Image(source: "NestedObservableObject-image-01.png")
                Viewが更新されません。
                しかし、`Child`の`age`はカウントアップされています。何が起こっているのでしょうか？
                `Child`は`class`なので、`Parent`は`Child`の実体ではなく参照を持っています。プロパティの`age`が変更されても`Parent`の`child`プロパティは変更されません。
                そのため、`@Published`が変更を検知できず通知されません。

            }
            
            @Step {
                この問題を修正するには、`Child`の`objectWillChange`を`Parent`が検知する必要があります。
                
                @Code(name: "NestedObservableObject.swift", file: NestedObservableObject-03.swift)
            }
            
            @Step {
                これでViewが更新されるようになりました。
                @Image(source: "NestedObservableObject-image-02.png")

                このように、`ObservableObject`では`class`が参照であることで`@Published`をつけていても変更通知がされないケースがあります。

            }
        }
    }
    
    @Section(title: "Observation") {
        @ContentAndMedia {
            `Observation`のケースではどうなるか確認します。
        }
        
        @Steps {
            @Step {
                `Observation`ではどのようになるか見ていきましょう。
                
                @Code(name: "NestedObservable.swift", file: NestedObservableObject-04.swift)
            }
            
            @Step {
                Viewも作成します。
                @Code(name: "NestedObservable.swift", file: NestedObservableObject-05.swift)
                
                `parent`が`@State`で宣言されていることに注意してください。
                `@Observable`では、`@State`でも動作させることができます。
            }
            
            @Step {
                この状態でHave Birthdayボタンをタップしてみましょう。
                @Image(source: "NestedObservableObject-image-02.png")
                
                `ObservableObject`の時とは違い、この状態で動作します。
                手動で変更通知を送らないと通知されなかった問題が解決されています。
            }
        }
    }
    
    @Section(title: "Inline Macro") {
        @ContentAndMedia {
            `Observation`はどのように問題を解決したか、マクロを展開してみます。
        }
        @Steps {
            @Step {
                `Child`の変更がどのように通知されていくか、展開されたマクロを見ながら追いかけます。
                Inline Macroで`@Observable`マクロを展開してみましょう。
                
                @Code(name: "InlineObservableMacro.swift", file: NestedObservableObject-06.swift)
                
                `age`が`@ObservationTracked`でマークされています。
                また、`@ObservationIgnored`で`_$observationRegistrar`というプロパティが生成されています。
            }
            
            @Step {
                `@ObservationTracked`をさらに展開してみます。
                
                @Code(name: "InlineObservableMacro.swift", file: NestedObservableObject-07.swift)
                
                `age`がcomputed propertyになって、getterとsetterが生成されています。
                setterで`withMutation(keyPath:)`を呼ぶことで`ObservationRegistrar`を通じて変更を通知していることがわかります。
            }
        }
    }
        
    @Section(title: "Summary") {
        @ContentAndMedia { 
            `ObservableObject`では`@Published`のプロパティの変更を検知しているため、参照が変化しない時に通知されない問題がありました。
            `@Observation`では、`setter`で`ObservationRegistrar`を通じて変更を通知することで、参照の中の変更であっても子の変更を親へ通知できるようになりました。
        }
    }
}
